datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  seed = "ts-node ./seed.ts"
}

enum UsuarioStatus {
  ATIVO
  INATIVO
  SUSPENSO
}

enum ContaStatus {
  ATIVA
  INATIVA
  SUSPENSA
}

enum TransacaoStatus {
  PENDENTE
  CONCLUIDA
  CANCELADA
  FALHA
}

enum TransacaoTipo {
  DEPOSITO
  SAQUE
  TRANSFERENCIA
  PAGAMENTO
}

enum IntervaloRepeticao {
  DIARIO
  SEMANAL
  MENSAL
  ANUAL
}

enum RecebimentoStatus {
  ATIVO
  INATIVO
  DELETADO
}

model Usuario {
  id                String            @id @default(uuid())
  nome_completo     String
  email             String         @unique         
  telefone          String         @unique
  cpf               String         @unique
  data_nascimento   DateTime
  status            UsuarioStatus
  endereco          Endereco?
  password          String?      
  tentativas_login  Int
  reactivation_code String? 
  created_at        DateTime      @default(now())
  updated_at        DateTime
  contas            Conta[]
  recebimentos      RecebimentosPreDefinidos[]
}

model Endereco {
  id           String      @id @default(uuid())
  usuario_id   String      @unique
  usuario      Usuario  @relation(fields: [usuario_id], references: [id])
  cep          String
  endereco     String
  numero       String
  complemento  String?
  bairro       String
  cidade       String
  uf           String
  created_at   DateTime     @default(now())
  updated_at   DateTime
}

model Conta {
  id                String            @id @default(uuid())
  usuario_id        String            @unique
  usuario           Usuario        @relation(fields: [usuario_id], references: [id])
  agencia           String
  numero_conta      String
  transactionPassword  String  
  saldo             Float
  status            ContaStatus
  created_at        DateTime      @default(now())
  updated_at        DateTime
  transacoesOrigem  Transacao[]    @relation("TransacaoContaOrigem")
  transacoesDestino Transacao[]    @relation("TransacaoContaDestino")
  recebimentos      RecebimentosPreDefinidos[]
}

model Transacao {
  id                         String                   @id @default(uuid())
  conta_origem_id            String
  conta_origem               Conta                 @relation("TransacaoContaOrigem", fields: [conta_origem_id], references: [id])
  conta_destino_id           String
  conta_destino              Conta                 @relation("TransacaoContaDestino", fields: [conta_destino_id], references: [id])
  valor                      Float
  tipo                       TransacaoTipo
  status                     TransacaoStatus
  recebimento_pre_definido_id String?
  recebimento_pre_definido   RecebimentosPreDefinidos? @relation(fields: [recebimento_pre_definido_id], references: [id])
  descricao_categoria        String?
  data_agendada              DateTime?
  created_at                 DateTime         @default(now())
  updated_at                 DateTime
}

model RecebimentosPreDefinidos {
  id                    String              @id @default(uuid())
  usuario_id            String
  usuario               Usuario          @relation(fields: [usuario_id], references: [id])
  nome                  String
  descricao             String?
  conta_destino_id      String
  conta_destino         Conta            @relation(fields: [conta_destino_id], references: [id])
  valor                 Float
  categoria             String?
  dia_mes               Int?
  status                RecebimentoStatus
  transacoes            Transacao[]
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
}

model Newsletter {
  id         String    @id @default(uuid())
  email      String    @unique
  created_at DateTime  @default(now())
}
